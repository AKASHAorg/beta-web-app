{"version":3,"file":"ModuleEmitter.js","sourceRoot":"","sources":["ModuleEmitter.ts"],"names":[],"mappings":"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","sourcesContent":["import { AbstractEmitter } from './AbstractEmitter';\nimport channels from '../channels';\nimport { mainResponse } from './responses';\n\nabstract class ModuleEmitter extends AbstractEmitter {\n    protected MODULE_NAME: string;\n    protected DEFAULT_MANAGED: string[];\n\n    /**\n     *\n     * @private\n     */\n    protected _manager() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].manager,\n            (event: any, data: IPCmanager) => {\n                if (data.listen) {\n                    if (this.getListenersCount(data.channel) >= 1) {\n                        return this.fireEvent(\n                            channels.client[this.MODULE_NAME].manager,\n                            mainResponse({ error: { message: `already listening on ${data.channel}` } }, data),\n                            event\n                        );\n                    }\n                    this.listenEvents(data.channel);\n                } else {\n                    this.purgeListener(data.channel);\n                }\n                return this.fireEvent(channels.client[this.MODULE_NAME].manager, mainResponse({}, data), event);\n            }\n        );\n        this.listenEvents(channels.server[this.MODULE_NAME].manager);\n        this.DEFAULT_MANAGED.forEach(\n            (action: string) =>\n                this.listenEvents(channels.server[this.MODULE_NAME][action])\n        );\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    public attachEmitters() {\n        return true;\n    }\n\n    public generateStreamListener(method) {\n        return (event: any, data: any) => {\n            let response: any;\n            // console.time(method.name);\n            method\n                .execute(data, (er, ev) => {\n                    if (er) {\n                        response = mainResponse({ error: { message: er } }, data);\n                    } else {\n                        response = mainResponse(ev, data);\n                    }\n                    this.fireEvent(\n                        channels.client[this.MODULE_NAME][method.name],\n                        response,\n                        event\n                    );\n                })\n                .then((result: any) => {\n                    response = mainResponse(result, data);\n                })\n                .catch((err: Error) => {\n                    response = mainResponse({ error: { message: err.message } }, data);\n                })\n                .finally(() => {\n                    this.fireEvent(\n                        channels.client[this.MODULE_NAME][method.name],\n                        response,\n                        event\n                    );\n                    // console.timeEnd(method.name);\n                    response = null;\n                });\n        };\n    }\n\n    public generateListener(method) {\n        return (event: any, data: any) => {\n            let response: any;\n            // const stamp = method.name + ' ' + (new Date()).getTime();\n            // console.time(stamp);\n            method\n                .execute(data)\n                .then((result: any) => {\n                    response = mainResponse(result, data);\n                })\n                .catch((err: Error) => {\n                    response = mainResponse({ error: { message: err.message } }, data);\n                })\n                .finally(() => {\n                    this.fireEvent(\n                        channels.client[this.MODULE_NAME][method.name],\n                        response,\n                        event\n                    );\n                    // console.timeEnd(stamp);\n                    response = null;\n                });\n        };\n    }\n\n    protected _initMethods(methods) {\n        methods.forEach((method) => {\n            // console.log([this.MODULE_NAME], [method.name]);\n            if (method.hasStream) {\n                this.registerListener(\n                    channels.server[this.MODULE_NAME][method.name],\n                    this.generateStreamListener(method)\n                );\n                return;\n            }\n            this.registerListener(\n                channels.server[this.MODULE_NAME][method.name],\n                this.generateListener(method)\n            );\n        });\n    }\n}\nexport default ModuleEmitter;\n"]}