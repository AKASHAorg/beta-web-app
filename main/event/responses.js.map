{"version":3,"file":"responses.js","sourceRoot":"","sources":["responses.ts"],"names":[],"mappings":";;AAAA,kEAA8D;AAC9D,kEAA8D;AAOjD,QAAA,YAAY,GAAG,CAAC,OAAY,EAAE,OAAY;IACnD,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;QAChB,MAAM,CAAC;YACH,IAAI,EAAE,EAAE;YACR,QAAQ,EAAE;gBACN,IAAI,EAAE,8BAAa,CAAC,WAAW,EAAE,CAAC,aAAa;gBAC/C,IAAI,EAAE,8BAAa,CAAC,WAAW,EAAE,CAAC,aAAa;aAClD;YACD,KAAK,EAAE,EAAE,OAAO,EAAE,OAAO,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,OAAO;SACrD,CAAC;IACN,CAAC;IACD,MAAM,CAAC;QACH,IAAI,EAAE,OAAO;QACb,QAAQ,EAAE;YACN,IAAI,EAAE,8BAAa,CAAC,WAAW,EAAE,CAAC,aAAa;YAC/C,IAAI,EAAE,8BAAa,CAAC,WAAW,EAAE,CAAC,aAAa;SAClD,EAAE,OAAO;KACb,CAAC;AACN,CAAC,CAAC","sourcesContent":["import { GethConnector } from '@akashaproject/geth-connector';\nimport { IpfsConnector } from '@akashaproject/ipfs-connector';\n/**\n *\n * @param rawData\n * @param request\n * @returns {any}\n */\nexport const mainResponse = (rawData: any, request: any): MainResponse => {\n    if (rawData.error) {\n        return {\n            data: {},\n            services: {\n                ipfs: IpfsConnector.getInstance().serviceStatus,\n                geth: GethConnector.getInstance().serviceStatus\n            },\n            error: { message: rawData.error.message }, request\n        };\n    }\n    return {\n        data: rawData,\n        services: {\n            ipfs: IpfsConnector.getInstance().serviceStatus,\n            geth: GethConnector.getInstance().serviceStatus\n        }, request\n    };\n};\n"]}